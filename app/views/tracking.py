
""" Resources for:

    - recording taxi position (/tracking/taxi)
    - reading taxi position (/tracking/customer)
"""

from app import app, request
from app.modules import database
from app.modules import location
from datetime import datetime
from json import loads
import requests


@app.route('/tracking/mobile/driver', methods=['POST'])
def f_driver():
    """
    Tracks geographical position from the taxi driver's Mobile Device,
    based on coordinates (lat/lon) provided by the Mobile App (through
    the activated GPS circuit).

    POST parameters:

        - username: drivers username
        - token: token generated during the user creation process
        - ride_id: ride ID, generated by other backend component (ride request)
        - lat: latitude (Mobile Device/GPS -> Mobile App)
        - lon: longitude (Mobile Device/GPS -> Mobile App)

    Response:

        - successful: int (0: tracked)
        - unsuccessful: int (1: fail to track / 2: fail to validate token)
    """
    if request.method == "POST":
        # processing POST parameters
        driver = request.form.get('username')
        token = request.form.get('token')
        ride_id = request.form.get('ride_id')
        latitude = request.form.get('lat')
        longitude = request.form.get('lon')
        # searching for address, based on geographical coordinates
        search = location.Location()
        addr = search.reverse(latitude, longitude)
        # registering timestamp, after address search
        ts = datetime.now()
        # building dictionary for search coordinates
        coord = {"lat": latitude, "lon": longitude}
        # storing traced position
        dbase = database.Database()
        result = dbase.track_position(ride_id, driver, addr, coord, ts, token)
        return result


@app.route('/tracking/mobile/passenger', methods=['GET'])
def f_passenger():
    """
    Provides the last tracked geographical position from the taxi drive's
    Mobile Device, for the ride (RideID) which was requested by the passnger.

    GET parameters (query string):

        - username: passengers username
        - token: token generated during the user creation process
        - ride_id: ride ID, generated by other backend component (ride request)

    Response:

        - successful: dict (database record)
        - unsuccessful: int (1: fail to validate token)
    """
    if request.method == "GET":
        # processing query string parameters
        passenger = request.args.get('username')
        token = request.args.get('token')
        ride_id = request.args.get('ride_id')
        # retrieving last geographical position
        dbase = database.Database()
        result = dbase.get_last_position(ride_id, passenger, token)
        return result
